
//After https://icodealot.com/json-to-sqlite-on-the-raspberry-pi-with-node-js/


//Declare Environments
//const { table } = require('console');
var https  = require('https');
var sqlite3 = require('sqlite3').verbose();

//Declare Data
var db   = new sqlite3.Database('./SandBox.db');
var url  = 'https://jsonplaceholder.typicode.com/todos';
var data = '';
var TableName = 'Test2';


//Add error handling with error at source.

/*
  Make an HTTPS request to the RESTful web service
*/

var req = https.request(url, (res) => {

  res.on('data', (d) => {
    data += d;
  });

  res.on('end', () => {
    var json = JSON.parse(data);
//console.log(JSON.stringify(json, null, 4));


//***** BEGIN INSERT INTO SANDBOX.DB  ***** */


    //Run function to create table
    create_table(json,TableName);

   
    //Confirm values inserted.
   
    db.each('select rowid, title '
          + 'from ' + TableName 
          + ' order by rowid asc', (err, row) => {
      console.log(row.rowid + ': ' + row.title);



    });
  
    
//***** END INSERT INTO SANDBOX.DB  ***** */



  });

});

req.end();


 //db.each('DROP table undefined')




/*
  Create the table and insert the values from each JSON object.
*/
function create_table(json,TableName) {


//If table exists, drop, create and insert values.
//var TableNameExists = db.run('SELECT CASE WHEN tbl_name = ' + TableName + ' THEN 1 ELSE 0 END FROM sqlite_master WHERE type = "table"');
  //if (TableNameExists= 1){
  //  db.run('DROP TABLE IF EXISTS  ' + TableName);  
 // }

  // Create table and insert values.
    
    db.serialize( () => {
      db.run('CREATE TABLE IF NOT EXISTS '
            + TableName
            + '(id numeric primary key, '
            + 'userid numeric, '
            + 'title text, '
            + 'completed text)');
  
  db.run('delete from ' + TableName); //or drop the table first..  This will truncate if no triggers.  Chose to drop if exist in case of triggers, high volume resulting in slowness.
  
      var stmt = db.prepare('insert into ' + TableName + ' values (?,?,?,?)');
  
      json.forEach( (item) => {
        stmt.run([item.id, item.userid, item.title, item.completed]);
      });
  
      stmt.finalize();
  
    });
  
  }


